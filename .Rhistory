runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
library(DT)
countries <- ISOcodes::ISO_3166_1$Name
library(DT)
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
View(data)
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
View(data)
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
View(data)
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
?shinyWidgetsGallery
shinyWidgetsGallery()
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
shinyWidgetsGallery()
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
#Sample Dashboard Data
dashData <- data.frame(
dashboardName = c("Dashboard A", "Dashboard B", "Dashboard C"),
dateCreated = as.POSIXct(c("2025-01-01 12:00:00", "2025-01-15 08:30:00", "2025-01-20 14:45:00")),
model = c("Model A", "Model A", "Model C"),
stringsAsFactors = FALSE
)
View(dashData)
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
shiny::runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
#Sample User Data
userData <- {
"firstName": ["John"],
#Sample User Data
jsonString <- '{
"firstName": ["John"],
"lastName": ["Smith"],
"email": ["jsmith123@outlook.com"],
"currentRole": ["Sr. Researcher"],
"country": ["Canada"],
"language": ["English"],
"infoConsent": [true],
"cloudConsent": [true]
}'
userData <- fromJSON(json_string)
userData <- fromJSON(jsonString)
View(userData)
View(userData)
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
?box
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
?panel
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
View(userData)
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
shiny::runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
library(shinydashboard)
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
View(modelData)
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
?dashboardHeader
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
shiny::runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
upload$content <- read.csv(paste("./Data/", dataName, sep = ""))
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
shiny::runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
?states()
states()
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
data <- read.csv()file.choose()
data <- read.csv(file.choose())
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
data <- read_parquet(file.choose())
mapData <- data %>%
select(Region, Subregion, Interpretation) %>%
group_by(Region, Subregion) %>%
summarise(
S = sum(Interpretation == "S"),
I = sum(Interpretation == "I"),
R = sum(Interpretation == "R"),
.groups = "drop"
) %>%
mutate(Count = S + I + R,
propS = S / Count,
propI = I / Count,
propR = R / Count,
Subregion = tolower(gsub(" County", "", Subregion))) %>%
select(Region, Subregion, propS, propI, propR, Count)
View(mapData)
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
map_rea
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
shiny::runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/accountPortal')
runApp('Git/GBADs ARIF DPM Dashboard/outputDashboard')
library(YFAR)
library(dplyr)
library(tidyr)
library(purrr)
library(googlesheets4)
# API Set-up --------------------------------------------------------------
my_key <- "dj0yJmk9UjE0Nm1GT091VGhzJmQ9WVdrOVpYTlpia3R2WXpFbWNHbzlNQT09JnM9Y29uc3VtZXJzZWNyZXQmc3Y9MCZ4PTE3"
my_secret <- "0266b157367298c95fde3467fce193434294ae9d"
app_name <- "Pancake Watch"
myapp <- httr::oauth_app(appname = app_name,
key = my_key,
secret = my_secret)
token <-
httr::oauth2.0_token(
httr::oauth_endpoints("yahoo"),
myapp)
token$refresh()
league.key <- y_games(token)
league.key <- league.key$league_key[14]
temp <- y_team_stats(league.key, token)
current_week <- as.numeric(temp[["r_parsed"]][[1]][["0"]][["league"]][[1]][["current_week"]])
weeks_remaining <- 21 - current_week
team_keys <- y_teams(league.key, token) %>% select(team_key)
# Data Extraction ---------------------------------------------------------
stat_names <- c("9004003" = "FG/A",
"5" = "FG",
"9007006" = "FT/A",
"8" = "FT",
"10" = "Tres",
"12" = "Pts",
"15" = "Reb",
"16" = "Ast",
"17" = "Stl",
"18" = "Blk",
"19" = "TO")
result_names <- c("5" = "FG_result",
"8" = "FT_result",
"10" = "Tres_result",
"12" = "Pts_result",
"15" = "Reb_result",
"16" = "Ast_result",
"17" = "Stl_result",
"18" = "Blk_result",
"19" = "TO_result")
week <- current_week - 1
stats_list <- list()
for (team_key in team_keys$team_key) {
match_stats <- y_matchups(team_key = team_key, token = token) %>%
filter(matchup_team_key == team_key,
matchup_status != "preevent",
matchup_week == week) %>%
select(matchup_team_stats) %>%
unnest(matchup_team_stats) %>%
mutate(stat_id = recode(stat_id, !!!stat_names),
Team = team_key,
Week = week) %>%
pivot_wider(names_from = stat_id, values_from = value) %>%
select(Team, Week, everything())
stats_list[[length(stats_list) + 1]] <- match_stats
}
stats_results <- bind_rows(stats_list)
results_list <- list()
for (team_key in team_keys$team_key) {
match_stats <- y_matchups(team_key = team_key, token = token) %>%
filter(matchup_team_key == team_key,
matchup_status != "preevent",
matchup_week == week) %>%
select(matchup_stat_winners) %>%
unnest(matchup_stat_winners) %>%
mutate(stat_id = recode(stat_id, !!!result_names),
Team = team_key,
Week = week) %>%
mutate(win_loss = ifelse(is.na(winner_team_key), 0.5, ifelse(winner_team_key != Team, 0, 1))) %>%
select(Team, Week, stat_id, win_loss) %>%
pivot_wider(names_from = stat_id, values_from = win_loss)
results_list[[length(results_list) + 1]] <- match_stats
}
final_results <- bind_rows(results_list)
teams <- y_teams(league.key, token) %>%
select("Team" = team_key, "Name" = team_name, "Manager" = team_managers_manager_nickname, "logo" = team_logos_team_logo_url)
complete_data <- teams %>%
left_join(stats_results, by = "Team") %>%
left_join(final_results, by = c("Team", "Week"))
# Matchups ----------------------------------------------------------------
# Only need to run once, since shouldn't change.
#
# matchups_list <- list()
#
# for (team_key in team_keys$team_key) {
# matchups <- y_matchups(team_key, token) %>%
#   select(matchup_week, matchup_team_key) %>%
#   filter(matchup_team_key != team_key) %>%
#   mutate(team = team_key) %>%
#   select("Week" = matchup_week, "Team" = team, "Opponent" = matchup_team_key)
#
# matchups_list[[length(matchups_list) + 1]] <- matchups
# }
#
# matchups <- bind_rows(matchups_list)
# sheet_id <- "https://docs.google.com/spreadsheets/d/1Xu8fIgooNdwgruL6LsRU7yGs5hbXIs42rQh_gkGM_aQ/edit?gid=1653951017#gid=1653951017"
# sheet_write(matchups, ss = sheet_id, sheet = "matchups")
# Read and Write Google Sheet ---------------------------------------------
gs4_auth(path = "/Users/kurtissobkowich/PancakeWatch/pancakewatch-4d8e23a97023.json")
sheet_id <- "https://docs.google.com/spreadsheets/d/1Xu8fIgooNdwgruL6LsRU7yGs5hbXIs42rQh_gkGM_aQ/edit?gid=1653951017#gid=1653951017"
temp <- read_sheet(sheet_id, sheet = "complete_data")
new_data <- bind_rows(complete_data, temp) %>%
group_by(Team, Week) %>%
slice(which.max(row_number() == 1 & row_number() == n() + 1)) %>%
ungroup()
sheet_write(new_data, ss = sheet_id, sheet = "complete_data")
# Simulations -------------------------------------------------------------
stats <- new_data
matchups <- read_sheet(sheet_id, sheet = "matchups") %>%
mutate(Week = as.numeric(Week))
final_scores <- stats %>%
select(Week, Team, FG_result:TO_result) %>%
left_join(matchups, by = c("Week", "Team")) %>%
select(Week, Team, Opponent, FG_result:TO_result)
scores_to_be_simulated <- matchups %>%
left_join(final_scores) %>%
filter(!complete.cases(.)) %>%
select(Week, Team, Opponent)
variability_factor <- 0.1
team_stats <- stats %>%
select(Team, FG, FT, Tres, Pts, Ast, Reb, Stl, Blk, TO) %>%
group_by(Team) %>%
summarize(across(
everything(),
list(mean = ~ mean(as.numeric(.), na.rm = TRUE),
sd = ~ mean(as.numeric(.), na.rm = TRUE) * variability_factor),
.names = "{.col}_{.fn}"
)) %>%
ungroup()
n_sims <- 1000
teams <- unique(matchups$Team)
last_place_counts <- setNames(rep(0, length(teams)), teams)
set.seed(123)
simulate_week <- function(scores_to_be_simulated, team_stats) {
scores_to_be_simulated %>%
left_join(team_stats, by = "Team") %>%
left_join(team_stats, by = c("Opponent" = "Team"), suffix = c("_team", "_opponent")) %>%
mutate(
FG_result = ifelse(FG_mean_team + rnorm(n(), 0, FG_sd_team) > FG_mean_opponent + rnorm(n(), 0, FG_sd_opponent), 1, 0),
FT_result = ifelse(FT_mean_team + rnorm(n(), 0, FT_sd_team) > FT_mean_opponent + rnorm(n(), 0, FT_sd_opponent), 1, 0),
Tres_result = ifelse(Tres_mean_team + rnorm(n(), 0, Tres_sd_team) > Tres_mean_opponent + rnorm(n(), 0, Tres_sd_opponent), 1, 0),
Pts_result = ifelse(Pts_mean_team + rnorm(n(), 0, Pts_sd_team) > Pts_mean_opponent + rnorm(n(), 0, Pts_sd_opponent), 1, 0),
Ast_result = ifelse(Ast_mean_team + rnorm(n(), 0, Ast_sd_team) > Ast_mean_opponent + rnorm(n(), 0, Ast_sd_opponent), 1, 0),
Reb_result = ifelse(Reb_mean_team + rnorm(n(), 0, Reb_sd_team) > Reb_mean_opponent + rnorm(n(), 0, Reb_sd_opponent), 1, 0),
Stl_result = ifelse(Stl_mean_team + rnorm(n(), 0, Stl_sd_team) > Stl_mean_opponent + rnorm(n(), 0, Stl_sd_opponent), 1, 0),
Blk_result = ifelse(Blk_mean_team + rnorm(n(), 0, Blk_sd_team) > Blk_mean_opponent + rnorm(n(), 0, Blk_sd_opponent), 1, 0),
TO_result = ifelse(TO_mean_team + rnorm(n(), 0, TO_sd_team) < TO_mean_opponent + rnorm(n(), 0, TO_sd_opponent), 1, 0)
) %>%
select(Week, Team, Opponent, FG_result:TO_result) %>%
select(Week, Team, Opponent, FG_result:TO_result)
}
for (sim in 1:n_sims) {
simulated_results <- map_dfr(unique(scores_to_be_simulated$Week), function(week) {
week_matchups <- scores_to_be_simulated %>% filter(Week == week)
simulate_week(week_matchups, team_stats)
})
full_results <- simulated_results %>%
bind_rows(final_scores) %>%
mutate(weekly_score = FG_result + FT_result + Tres_result + Pts_result +
Ast_result + Reb_result + Stl_result + Blk_result + TO_result)
season_scores <- full_results %>%
group_by(Team) %>%
summarize(total_score = sum(weekly_score, na.rm = TRUE)) %>%
ungroup()
min_score <- min(season_scores$total_score, na.rm = TRUE)
last_place_teams <- season_scores %>%
filter(total_score == min_score) %>%
pull(Team)
last_place_counts[last_place_teams] <- last_place_counts[last_place_teams] + 1
}
last_place_probabilities <- last_place_counts / n_sims
last_place_probabilities_df <- as.data.frame(last_place_probabilities) %>%
rename(Probability_of_Last = last_place_probabilities) %>%
tibble::rownames_to_column("Team")
sheet_write(last_place_probabilities_df, ss = sheet_id, sheet = "pancake_projections")
# Pancake Time Series ------------------------------------------------------
timeseries <- read_sheet(sheet_id, sheet = "pancake_timeseries")
current_week_col <- paste0("Week_", week)
ts_df <- last_place_probabilities_df %>%
rename(!!current_week_col := Probability_of_Last)
if (current_week_col %in% colnames(timeseries)) {
# If the column exists, update it
timeseries <- timeseries %>%
select(-!!current_week_col) %>% # Remove the old column
left_join(ts_df, by = "Team")  # Add the updated column
} else {
# If the column does not exist, simply join
timeseries <- timeseries %>%
left_join(ts_df, by = "Team")
}
sheet_write(timeseries, ss = sheet_id, sheet = "pancake_timeseries")
# Misc projections --------------------------------------------------------
team_projections <- stats %>%
group_by(Team) %>%
filter(Week %in% 1:18) %>%
summarize(across(c(FG, FT, Tres, Pts, Ast, Reb, Stl, Blk, TO), ~ mean(as.numeric(.), na.rm = TRUE))) %>%
mutate(across(c(FG, FT, Tres, Pts, Ast, Reb, Stl, Blk, TO), as.numeric))
weekly_matchups <- matchups %>%
left_join(team_projections, by = c("Team")) %>%
left_join(team_projections, by = c("Opponent" = "Team"), suffix = c("_team", "_opponent")) %>%
mutate(
FG_proj = ifelse(FG_team > FG_opponent, 1, 0),
FT_proj = ifelse(FT_team > FT_opponent, 1, 0),
Tres_proj = ifelse(Tres_team > Tres_opponent, 1, 0),
Pts_proj = ifelse(Pts_team > Pts_opponent, 1, 0),
Ast_proj = ifelse(Ast_team > Ast_opponent, 1, 0),
Reb_proj = ifelse(Reb_team > Reb_opponent, 1, 0),
Stl_proj = ifelse(Stl_team > Stl_opponent, 1, 0),
Blk_proj = ifelse(Blk_team > Blk_opponent, 1, 0),
TO_proj = ifelse(TO_team < TO_opponent, 1, 0)
)
projected_matchups <- weekly_matchups %>%
mutate(Week = as.numeric(Week)) %>%
select(Week, Team, Opponent, FG_proj: TO_proj)
actual_matchups <- stats %>%
mutate(Week = as.numeric(Week)) %>%
select(Week, Team, FG_result:TO_result)
combined_matchups <- projected_matchups %>%
left_join(actual_matchups, by = c("Week", "Team")) %>%
mutate(
FG_final = ifelse(is.na(FG_result), FG_proj, FG_result),
FT_final = ifelse(is.na(FT_result), FT_proj, FT_result),
Tres_final = ifelse(is.na(Tres_result), Tres_proj, Tres_result),
Pts_final = ifelse(is.na(Pts_result), Pts_proj, Pts_result),
Ast_final = ifelse(is.na(Ast_result), Ast_proj, Ast_result),
Reb_final = ifelse(is.na(Reb_result), Reb_proj, Reb_result),
Stl_final = ifelse(is.na(Stl_result), Stl_proj, Stl_result),
Blk_final = ifelse(is.na(Blk_result), Blk_proj, Blk_result),
TO_final = ifelse(is.na(TO_result), TO_proj, TO_result)
)%>%
group_by(Team, Week) %>%
mutate(proj_score = rowSums(select(cur_data(), FG_final:TO_final), na.rm = TRUE),
actual_score = rowSums(select(cur_data(), FG_result:TO_result))) %>%
ungroup()
projections_detailed <- weekly_matchups %>%
select(Week:TO_opponent)
projections_simple <- combined_matchups %>%
select(Week, Team, Opponent, FG_final:TO_final, proj_score, actual_score)
projected_standings <- projections_simple %>%
select(Team, proj_score) %>%
group_by(Team) %>%
summarize(total_proj_score = sum(proj_score, na.rm = TRUE)) %>%
arrange(-total_proj_score)
sheet_write(projected_standings, ss = sheet_id, sheet = "projected_standings")
sheet_write(projections_detailed, ss = sheet_id, sheet = "weekly_projections")
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/CompanionAnimalAMRDashboard copy')
runApp('Git/companion_animal_amr/CompanionAnimalAMRDashboard')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/Beta - AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
