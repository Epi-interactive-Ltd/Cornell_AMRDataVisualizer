if (!is.na(phi[i, j])) {
hovertext[i, j] <- paste0(labels[i],"<br>",
labels[j], "<br>",
"Correlation: ", round(phi[i, j], 2), "<br>",
"Observations: ", counts[i, j])
}
}
}
labels <- colnames(matrixData)
plotly_heatmap <- plot_ly(
z = phi,
x = labels,
y = labels,
type = "heatmap",
text = hovertext,
hoverinfo = "text",
colorscale = list(
list(0, 'tomato'),
list(0.25, 'pink'),
list(0.5, '#F4F4F4'),
list(0.75, '#44CDC4'),
list(1, '#34435a')
),
xgap = 1,
ygap = 1,
zmin = -1,
zmax = 1,
colorbar = list(title = "Correlation"),
hoverlabel = list(bgcolor = "white")
) %>%
layout(
xaxis = list(title = "", tickangle = 45),
yaxis = list(title = ""),
margin = list(l = 100, r = 100, b = 150, t = 100)
)
plotly_heatmap
plotly_heatmap <- plot_ly(
z = phi,
x = labels,
y = labels,
type = "heatmap",
text = hovertext,
hoverinfo = "text",
colorscale = list(
list(0, 'tomato'),
list(0.25, 'pink'),
list(0.5, '#F4F4F4'),
list(0.75, '#44CDC4'),
list(1, '#34435a')
),
xgap = 1,
ygap = 1,
zmin = -1,
zmax = 1,
showscale=True,
hoverlabel = list(bgcolor = "white")
) %>%
layout(
xaxis = list(title = "", tickangle = 45),
yaxis = list(title = ""),
margin = list(l = 100, r = 100, b = 150, t = 100)
)
plotly_heatmap <- plot_ly(
z = phi,
x = labels,
y = labels,
type = "heatmap",
text = hovertext,
hoverinfo = "text",
colorscale = list(
list(0, 'tomato'),
list(0.25, 'pink'),
list(0.5, '#F4F4F4'),
list(0.75, '#44CDC4'),
list(1, '#34435a')
),
xgap = 1,
ygap = 1,
zmin = -1,
zmax = 1,
showscale = F,
hoverlabel = list(bgcolor = "white")
) %>%
layout(
xaxis = list(title = "", tickangle = 45),
yaxis = list(title = ""),
margin = list(l = 100, r = 100, b = 150, t = 100)
)
plotly_heatmap
plotly_heatmap <- plot_ly(
z = phi,
x = labels,
y = labels,
type = "heatmap",
text = hovertext,
hoverinfo = "text",
colorscale = list(
list(0, 'tomato'),
list(0.25, 'pink'),
list(0.5, '#F4F4F4'),
list(0.75, '#44CDC4'),
list(1, '#34435a')
),
xgap = 1,
ygap = 1,
zmin = -1,
zmax = 1,
showscale = F,
hoverlabel = list(bgcolor = "white")
) %>%
layout(
xaxis = list(title = ""),
yaxis = list(title = ""),
margin = list(l = 100, r = 100, b = 150, t = 100)
)
plotly_heatmap
plotly_heatmap <- plot_ly(
z = phi,
x = labels,
y = labels,
type = "heatmap",
text = hovertext,
hoverinfo = "text",
colorscale = list(
list(0, 'tomato'),
list(0.25, 'pink'),
list(0.5, '#F4F4F4'),
list(0.75, '#44CDC4'),
list(1, '#34435a')
),
xgap = 1,
ygap = 1,
zmin = -1,
zmax = 1,
showscale = F,
hoverlabel = list(bgcolor = "white")
) %>%
layout(
xaxis = list(title = ""),
yaxis = list(title = ""),
margin = list(l = 0, r = 0, b = 0, t = 0)
)
plotly_heatmap
plotly_heatmap <- plot_ly(
z = phi,
x = labels,
y = labels,
type = "heatmap",
text = hovertext,
hoverinfo = "text",
colorscale = list(
list(0, 'tomato'),
list(0.25, 'pink'),
list(0.5, '#F4F4F4'),
list(0.75, '#44CDC4'),
list(1, '#34435a')
),
xgap = 1,
ygap = 1,
zmin = -1,
zmax = 1,
showscale = F,
hoverlabel = list(bgcolor = "white")
) %>%
layout(
xaxis = list(title = ""),
yaxis = list(title = ""),
margin = list(l = 20, r = 20, b = 20, t = 20)
)
plotly_heatmap
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
plotly_heatmap <- plot_ly(
z = phi,
x = labels,
y = labels,
type = "heatmap",
text = hovertext,
hoverinfo = "text",
colorscale = list(
list(0, 'tomato'),
list(0.25, 'pink'),
list(0.5, '#F4F4F4'),
list(0.75, '#44CDC4'),
list(1, '#34435a')
),
xgap = 1,
ygap = 1,
zmin = -1,
zmax = 1,
showscale = F,
hoverlabel = list(bgcolor = "white")
) %>%
layout(
xaxis = list(title = ""),
yaxis = list(title = ""),
margin = list(l = 20, r = 20, b = 20, t = 20)
)
plotly_heatmap
#Remove correlations based on less than 30 obs.
phi[counts < 30] <- NA
keep <- !apply(is.na(phi), 1, all)
# Subset matrices to remove rows and columns that are entirely NA
phi <- phi[keep, keep]
counts <- counts[keep, keep]
labels <- colnames(matrixData)[keep]
hovertext <- matrix("", nrow = ncol(matrixData), ncol = ncol(matrixData))
for (i in 1:ncol(matrixData)) {
for (j in 1:ncol(matrixData)) {
if (!is.na(phi[i, j])) {
hovertext[i, j] <- paste0(labels[i],"<br>",
labels[j], "<br>",
"Correlation: ", round(phi[i, j], 2), "<br>",
"Observations: ", counts[i, j])
}
}
}
labels <- colnames(matrixData)
plotly_heatmap <- plot_ly(
z = phi,
x = labels,
y = labels,
type = "heatmap",
text = hovertext,
hoverinfo = "text",
colorscale = list(
list(0, 'tomato'),
list(0.25, 'pink'),
list(0.5, '#F4F4F4'),
list(0.75, '#44CDC4'),
list(1, '#34435a')
),
xgap = 1,
ygap = 1,
zmin = -1,
zmax = 1,
showscale = F,
hoverlabel = list(bgcolor = "white")
) %>%
layout(
xaxis = list(title = ""),
yaxis = list(title = ""),
margin = list(l = 20, r = 20, b = 20, t = 20)
)
plotly_heatmap
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
# Load required libraries
library(leaflet)
library(dplyr)
library(sf)
# Sample data (replace this with your actual data)
# Assuming 'regions_data' is an sf object with 'region', 'observations', and the geometry column for polygons
regions_data <- st_as_sf(data.frame(
region = c("Region1", "Region2", "Region3", "Region4"),
observations = c(50, 20, 75, 10),
geometry = st_sfc(st_polygon(list(rbind(c(-80, 35), c(-81, 35), c(-81, 36), c(-80, 36), c(-80, 35)))),
st_polygon(list(rbind(c(-79, 34), c(-80, 34), c(-80, 35), c(-79, 35), c(-79, 34)))),
st_polygon(list(rbind(c(-78, 33), c(-79, 33), c(-79, 34), c(-78, 34), c(-78, 33)))),
st_polygon(list(rbind(c(-77, 32), c(-78, 32), c(-78, 33), c(-77, 33), c(-77, 32)))))
))
# Define a color palette
pal <- colorBin("YlGnBu", domain = regions_data$observations, bins = 5)
# Create a function to add hatches to polygons
add_hatch_polygons <- function(map, data, label, hatch_density = 0.5, hatch_angle = 45) {
# Create hatch lines for each polygon
for (i in seq_len(nrow(data))) {
poly <- st_geometry(data)[i]
bbox <- st_bbox(poly)
lines <- list()
x_seq <- seq(bbox["xmin"], bbox["xmax"], by = hatch_density)
y_seq <- seq(bbox["ymin"], bbox["ymax"], by = hatch_density)
for (x in x_seq) {
lines <- append(lines, st_linestring(rbind(c(x, bbox["ymin"]), c(x, bbox["ymax"]))))
}
for (y in y_seq) {
lines <- append(lines, st_linestring(rbind(c(bbox["xmin"], y), c(bbox["xmax"], y))))
}
lines_sf <- st_sfc(lines)
lines_sf <- st_intersection(st_geometry(data)[i], lines_sf)
map <- addPolylines(map, data = lines_sf, color = "black", weight = 1)
}
return(map)
}
# Create the Leaflet map
leaflet(data = regions_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(observations),
weight = 1,
opacity = 1,
color = 'white',
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(region, observations)
) %>%
add_hatch_polygons(
data = regions_data %>% filter(observations < 30),
label = ~paste(region, observations)
)
# Create a function to add hatches to polygons
add_hatch_polygons <- function(map, data, label, hatch_density = 0.5, hatch_angle = 45) {
# Create hatch lines for each polygon
for (i in seq_len(nrow(data))) {
poly <- st_geometry(data)[i]
bbox <- st_bbox(poly)
lines <- list()
x_seq <- seq(bbox["xmin"], bbox["xmax"], by = hatch_density)
y_seq <- seq(bbox["ymin"], bbox["ymax"], by = hatch_density)
for (x in x_seq) {
lines <- append(lines, st_linestring(rbind(c(x, bbox["ymin"]), c(x, bbox["ymax"]))))
}
for (y in y_seq) {
lines <- append(lines, st_linestring(rbind(c(bbox["xmin"], y), c(bbox["xmax"], y))))
}
lines_sf <- st_sfc(lines)
lines_sf <- st_intersection(st_geometry(data)[i], lines_sf)
map <- addPolylines(map, data = lines_sf, color = "black", weight = 1)
}
return(map)
}
# Create the Leaflet map
leaflet(data = regions_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(observations),
weight = 1,
opacity = 1,
color = 'white',
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(region, observations)
) %>%
add_hatch_polygons(
data = regions_data %>% filter(observations < 30),
label = ~paste(region, observations)
)
# Load required libraries
library(leaflet)
library(dplyr)
library(sf)
# Sample data (replace this with your actual data)
# Assuming 'regions_data' is an sf object with 'region', 'observations', and the geometry column for polygons
regions_data <- st_as_sf(data.frame(
region = c("Region1", "Region2", "Region3", "Region4"),
observations = c(50, 20, 75, 10),
geometry = st_sfc(st_polygon(list(rbind(c(-80, 35), c(-81, 35), c(-81, 36), c(-80, 36), c(-80, 35)))),
st_polygon(list(rbind(c(-79, 34), c(-80, 34), c(-80, 35), c(-79, 35), c(-79, 34)))),
st_polygon(list(rbind(c(-78, 33), c(-79, 33), c(-79, 34), c(-78, 34), c(-78, 33)))),
st_polygon(list(rbind(c(-77, 32), c(-78, 32), c(-78, 33), c(-77, 33), c(-77, 32)))))
))
# Define a color palette
pal <- colorBin("YlGnBu", domain = regions_data$observations, bins = 5)
# Function to create hatch lines for a polygon
create_hatch_lines <- function(polygon, density = 0.02) {
bbox <- st_bbox(polygon)
lines <- list()
x_seq <- seq(bbox["xmin"], bbox["xmax"], by = density)
y_seq <- seq(bbox["ymin"], bbox["ymax"], by = density)
for (x in x_seq) {
lines <- append(lines, st_linestring(matrix(c(x, bbox["ymin"], x, bbox["ymax"]), ncol = 2, byrow = TRUE)))
}
for (y in y_seq) {
lines <- append(lines, st_linestring(matrix(c(bbox["xmin"], y, bbox["xmax"], y), ncol = 2, byrow = TRUE)))
}
st_sfc(lines, crs = st_crs(polygon))
}
# Create the Leaflet map
leaflet(data = regions_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(observations),
weight = 1,
opacity = 1,
color = 'white',
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(region, observations)
) %>%
{
regions_to_hatch <- regions_data %>% filter(observations < 30)
for (i in seq_len(nrow(regions_to_hatch))) {
hatch_lines <- create_hatch_lines(st_geometry(regions_to_hatch)[i])
. <- addPolylines(., data = hatch_lines, color = "black", weight = 1)
}
.
}
# Load required libraries
library(leaflet)
library(dplyr)
library(sf)
# Sample data (replace this with your actual data)
# Assuming 'regions_data' is an sf object with 'region', 'observations', and the geometry column for polygons
regions_data <- st_as_sf(data.frame(
region = c("Region1", "Region2", "Region3", "Region4"),
observations = c(50, 20, 75, 10),
geometry = st_sfc(st_polygon(list(rbind(c(-80, 35), c(-81, 35), c(-81, 36), c(-80, 36), c(-80, 35)))),
st_polygon(list(rbind(c(-79, 34), c(-80, 34), c(-80, 35), c(-79, 35), c(-79, 34)))),
st_polygon(list(rbind(c(-78, 33), c(-79, 33), c(-79, 34), c(-78, 34), c(-78, 33)))),
st_polygon(list(rbind(c(-77, 32), c(-78, 32), c(-78, 33), c(-77, 33), c(-77, 32)))))
))
# Define a color palette
pal <- colorBin("YlGnBu", domain = regions_data$observations, bins = 5)
# Function to create hatch lines for a polygon
create_hatch_lines <- function(polygon, density = 0.02) {
bbox <- st_bbox(polygon)
lines <- list()
x_seq <- seq(bbox["xmin"], bbox["xmax"], by = density)
y_seq <- seq(bbox["ymin"], bbox["ymax"], by = density)
for (x in x_seq) {
lines <- append(lines, st_linestring(matrix(c(x, bbox["ymin"], x, bbox["ymax"]), ncol = 2, byrow = TRUE)))
}
for (y in y_seq) {
lines <- append(lines, st_linestring(matrix(c(bbox["xmin"], y, bbox["xmax"], y), ncol = 2, byrow = TRUE)))
}
st_sfc(lines, crs = st_crs(polygon))
}
# Create the Leaflet map
leaflet(data = regions_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(observations),
weight = 1,
opacity = 1,
color = 'white',
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(region, observations)
) %>%
{
regions_to_hatch <- regions_data %>% filter(observations < 30)
for (i in seq_len(nrow(regions_to_hatch))) {
hatch_lines <- create_hatch_lines(st_geometry(regions_to_hatch)[i])
. <- addPolylines(., data = hatch_lines, color = "black", weight = 1)
}
.
}
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
devtools::install_github("chasemc/electricShine")
library(electricShine)
# Define the path to your Shiny app directory
app_dir <- "/Users/kurtissobkowich/Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer"
# Create an ElectricShine object
electric <- electricShine::setup(
app_name = "AMRVisualizer",       # Name of your application
app_dir = app_dir,             # Directory of your Shiny app
os = "mac",                    # Target operating system ("win" for Windows, "mac" for MacOS, "linux" for Linux)
node_version = "12.18.3",      # Node.js version to use
electron_version = "9.1.2"     # Electron version to use
)
library(electricShine)
?electricShine
??electricShine
# Create an ElectricShine object
electric <- electricShine::electrify(
app_name = "AMRVisualizer",       # Name of your application
app_dir = app_dir,             # Directory of your Shiny app
os = "mac",                    # Target operating system ("win" for Windows, "mac" for MacOS, "linux" for Linux)
node_version = "12.18.3",      # Node.js version to use
electron_version = "9.1.2"     # Electron version to use
)
# Create an ElectricShine object
electricShine::electrify(app_name = "AMRVisualizer",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = app_dir)
# Create an ElectricShine object
electricShine::build(app_name = "AMRVisualizer",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = app_dir)
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
renv::restore()
#renv::init()
renv::snapshot()
getwd()
setwd("/Users/kurtissobkowich/Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer)"
setwd("/Users/kurtissobkowich/Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer")
setwd("/Users/kurtissobkowich/Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer")
renv::restore()
renv::init()
renv::snapshot()
