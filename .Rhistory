color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(region, observations)
) %>%
add_hatch_polygons(
data = regions_data %>% filter(observations < 30),
label = ~paste(region, observations)
)
# Create a function to add hatches to polygons
add_hatch_polygons <- function(map, data, label, hatch_density = 0.5, hatch_angle = 45) {
# Create hatch lines for each polygon
for (i in seq_len(nrow(data))) {
poly <- st_geometry(data)[i]
bbox <- st_bbox(poly)
lines <- list()
x_seq <- seq(bbox["xmin"], bbox["xmax"], by = hatch_density)
y_seq <- seq(bbox["ymin"], bbox["ymax"], by = hatch_density)
for (x in x_seq) {
lines <- append(lines, st_linestring(rbind(c(x, bbox["ymin"]), c(x, bbox["ymax"]))))
}
for (y in y_seq) {
lines <- append(lines, st_linestring(rbind(c(bbox["xmin"], y), c(bbox["xmax"], y))))
}
lines_sf <- st_sfc(lines)
lines_sf <- st_intersection(st_geometry(data)[i], lines_sf)
map <- addPolylines(map, data = lines_sf, color = "black", weight = 1)
}
return(map)
}
# Create the Leaflet map
leaflet(data = regions_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(observations),
weight = 1,
opacity = 1,
color = 'white',
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(region, observations)
) %>%
add_hatch_polygons(
data = regions_data %>% filter(observations < 30),
label = ~paste(region, observations)
)
# Load required libraries
library(leaflet)
library(dplyr)
library(sf)
# Sample data (replace this with your actual data)
# Assuming 'regions_data' is an sf object with 'region', 'observations', and the geometry column for polygons
regions_data <- st_as_sf(data.frame(
region = c("Region1", "Region2", "Region3", "Region4"),
observations = c(50, 20, 75, 10),
geometry = st_sfc(st_polygon(list(rbind(c(-80, 35), c(-81, 35), c(-81, 36), c(-80, 36), c(-80, 35)))),
st_polygon(list(rbind(c(-79, 34), c(-80, 34), c(-80, 35), c(-79, 35), c(-79, 34)))),
st_polygon(list(rbind(c(-78, 33), c(-79, 33), c(-79, 34), c(-78, 34), c(-78, 33)))),
st_polygon(list(rbind(c(-77, 32), c(-78, 32), c(-78, 33), c(-77, 33), c(-77, 32)))))
))
# Define a color palette
pal <- colorBin("YlGnBu", domain = regions_data$observations, bins = 5)
# Function to create hatch lines for a polygon
create_hatch_lines <- function(polygon, density = 0.02) {
bbox <- st_bbox(polygon)
lines <- list()
x_seq <- seq(bbox["xmin"], bbox["xmax"], by = density)
y_seq <- seq(bbox["ymin"], bbox["ymax"], by = density)
for (x in x_seq) {
lines <- append(lines, st_linestring(matrix(c(x, bbox["ymin"], x, bbox["ymax"]), ncol = 2, byrow = TRUE)))
}
for (y in y_seq) {
lines <- append(lines, st_linestring(matrix(c(bbox["xmin"], y, bbox["xmax"], y), ncol = 2, byrow = TRUE)))
}
st_sfc(lines, crs = st_crs(polygon))
}
# Create the Leaflet map
leaflet(data = regions_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(observations),
weight = 1,
opacity = 1,
color = 'white',
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(region, observations)
) %>%
{
regions_to_hatch <- regions_data %>% filter(observations < 30)
for (i in seq_len(nrow(regions_to_hatch))) {
hatch_lines <- create_hatch_lines(st_geometry(regions_to_hatch)[i])
. <- addPolylines(., data = hatch_lines, color = "black", weight = 1)
}
.
}
# Load required libraries
library(leaflet)
library(dplyr)
library(sf)
# Sample data (replace this with your actual data)
# Assuming 'regions_data' is an sf object with 'region', 'observations', and the geometry column for polygons
regions_data <- st_as_sf(data.frame(
region = c("Region1", "Region2", "Region3", "Region4"),
observations = c(50, 20, 75, 10),
geometry = st_sfc(st_polygon(list(rbind(c(-80, 35), c(-81, 35), c(-81, 36), c(-80, 36), c(-80, 35)))),
st_polygon(list(rbind(c(-79, 34), c(-80, 34), c(-80, 35), c(-79, 35), c(-79, 34)))),
st_polygon(list(rbind(c(-78, 33), c(-79, 33), c(-79, 34), c(-78, 34), c(-78, 33)))),
st_polygon(list(rbind(c(-77, 32), c(-78, 32), c(-78, 33), c(-77, 33), c(-77, 32)))))
))
# Define a color palette
pal <- colorBin("YlGnBu", domain = regions_data$observations, bins = 5)
# Function to create hatch lines for a polygon
create_hatch_lines <- function(polygon, density = 0.02) {
bbox <- st_bbox(polygon)
lines <- list()
x_seq <- seq(bbox["xmin"], bbox["xmax"], by = density)
y_seq <- seq(bbox["ymin"], bbox["ymax"], by = density)
for (x in x_seq) {
lines <- append(lines, st_linestring(matrix(c(x, bbox["ymin"], x, bbox["ymax"]), ncol = 2, byrow = TRUE)))
}
for (y in y_seq) {
lines <- append(lines, st_linestring(matrix(c(bbox["xmin"], y, bbox["xmax"], y), ncol = 2, byrow = TRUE)))
}
st_sfc(lines, crs = st_crs(polygon))
}
# Create the Leaflet map
leaflet(data = regions_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(observations),
weight = 1,
opacity = 1,
color = 'white',
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(region, observations)
) %>%
{
regions_to_hatch <- regions_data %>% filter(observations < 30)
for (i in seq_len(nrow(regions_to_hatch))) {
hatch_lines <- create_hatch_lines(st_geometry(regions_to_hatch)[i])
. <- addPolylines(., data = hatch_lines, color = "black", weight = 1)
}
.
}
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
devtools::install_github("chasemc/electricShine")
library(electricShine)
# Define the path to your Shiny app directory
app_dir <- "/Users/kurtissobkowich/Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer"
# Create an ElectricShine object
electric <- electricShine::setup(
app_name = "AMRVisualizer",       # Name of your application
app_dir = app_dir,             # Directory of your Shiny app
os = "mac",                    # Target operating system ("win" for Windows, "mac" for MacOS, "linux" for Linux)
node_version = "12.18.3",      # Node.js version to use
electron_version = "9.1.2"     # Electron version to use
)
library(electricShine)
?electricShine
??electricShine
# Create an ElectricShine object
electric <- electricShine::electrify(
app_name = "AMRVisualizer",       # Name of your application
app_dir = app_dir,             # Directory of your Shiny app
os = "mac",                    # Target operating system ("win" for Windows, "mac" for MacOS, "linux" for Linux)
node_version = "12.18.3",      # Node.js version to use
electron_version = "9.1.2"     # Electron version to use
)
# Create an ElectricShine object
electricShine::electrify(app_name = "AMRVisualizer",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = app_dir)
# Create an ElectricShine object
electricShine::build(app_name = "AMRVisualizer",
short_description = "My demo application",
semantic_version = "1.0.0",
build_path = app_dir)
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
# Load Libraries ----------------------------------------------------------
library(tidyverse)
library(usmap)
library(leaflet)
library(sf)
library(tigris)
library(AMR)
library(scales)
library(ggmap)
library(insight)
library(zoo)
library(ggpubr)
library(broom)
# Load Local Data ---------------------------------------------------------
# NY State County Fips Codes ----------------------------------------------
ny.fips <- read.csv("/Users/kurtissobkowich/Library/CloudStorage/OneDrive-UniversityofGuelph/AMR/CornellUSDA/ComparingIDEXXAHDC/nyStateFips.csv")
# Read in data tables -----------------------------------------------------
idexx.Ec <- read.csv("/Users/kurtissobkowich/Library/CloudStorage/OneDrive-UniversityofGuelph/AMR/CornellUSDA/DashboardDataTables/Data Tables/2023-12-07-AMRDataExplorerTableEC_IDEXX.csv")
idexx.Ec <- idexx.Ec %>%
select(-X) %>%
mutate(bacteria = as.mo(bacteria),
bacteria = mo_name(bacteria),
drug = as.ab(drug),
class = ab_group(drug)) %>%
arrange(county, date, drug)
idexx.Sp <- read.csv("/Users/kurtissobkowich/Library/CloudStorage/OneDrive-UniversityofGuelph/AMR/CornellUSDA/DashboardDataTables/Data Tables/2023-12-07-AMRDataExplorerTableSP_IDEXX.csv")
idexx.Sp <- idexx.Sp %>%
select(-X) %>%
mutate(bacteria = as.mo(bacteria),
bacteria = mo_name(bacteria),
drug = as.ab(drug),
class = ab_group(drug)) %>%
arrange(county, date, drug)
idexx <- rbind(idexx.Ec, idexx.Sp)
ahdc.Ec <- read.csv("/Users/kurtissobkowich/Library/CloudStorage/OneDrive-UniversityofGuelph/AMR/CornellUSDA/DashboardDataTables/Data Tables/2023-12-08-AMRDataExplorerTableEC_AHDC.csv")
ahdc.Ec <- ahdc.Ec %>%
select(-X) %>%
mutate(bacteria = as.mo(bacteria),
bacteria = mo_name(bacteria),
drug = as.ab(drug),
class = ab_group(drug)) %>%
arrange(county, date, drug)
ahdc.Sp <-  read.csv("/Users/kurtissobkowich/Library/CloudStorage/OneDrive-UniversityofGuelph/AMR/CornellUSDA/DashboardDataTables/Data Tables/2023-12-08-AMRDataExplorerTableSP_AHDC.csv")
ahdc.Sp <- ahdc.Sp %>%
select(-X) %>%
mutate(bacteria = as.mo(bacteria),
bacteria = mo_name(bacteria),
drug = as.ab(drug),
class = ab_group(drug)) %>%
arrange(county, date, drug)
ahdc <- rbind(ahdc.Ec, ahdc.Sp)
View(idexx)
# Load NY State Maps ------------------------------------------------------
ny.map <- counties("New York", resolution = "20m") %>%
select("fips" = GEOID, geometry)
ny.fips <- ny.fips %>%
mutate(fips = as.character(fips))
ny.regions <- ny.map %>%
left_join(ny.fips, by = "fips") %>%
group_by(region) %>%
summarise(geometry = st_union(geometry), .groups = "drop")
# Compare Coverage --------------------------------------------------------
idexx.coverage <- idexx %>%
select(county, bacteria, Total) %>%
group_by(county, bacteria) %>%
summarize(Total = sum(Total, na.rm = T))
ahdc.coverage <- ahdc %>%
select(county, bacteria, Total) %>%
group_by(county, bacteria) %>%
summarize(Total = sum(Total, na.rm = T))
coverage <- idexx.coverage %>%
left_join(ahdc.coverage, by = c("county", "bacteria")) %>%
rename("idexx.total" = Total.x, "ahdc.total" = Total.y) %>%
group_by(county, bacteria) %>%
mutate(total = sum(idexx.total, ahdc.total, na.rm = T)) %>%
mutate(idexx.percent = (idexx.total/total)*100) %>%
ungroup() %>%
left_join(ny.fips, by = "county") %>%
left_join(ny.map, by = "fips")
##Plot Coverage Map
coverage.map <- function(map.data){
p <- ggplot(data = map.data) +
geom_sf(color = "grey30", linewidth = 0.3, aes(geometry = geometry, fill = idexx.percent))+
scale_fill_gradient2(low = "dodgerblue", mid = "lightyellow", high = "tomato", midpoint = 50,
name = "Testing Coverage",
breaks = c(5, 50, 95),
labels = c("100% AHDC", "Equal Coverage", "100% IDEXX"),
limit = c(0, 100),
na.value = "grey")+
geom_point(aes(x = -76.5019, y = 42.4440), color = "black", size = 1)+
theme_minimal()+
theme(legend.title=element_blank(),
legend.position="bottom",
legend.justification = "center",
legend.key.height = unit(0.5, "cm"),
legend.key.width = unit(3, "cm"),
legend.text = element_text(size = 12),
title = element_text(size = 14),
plot.title.position = "panel",
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "lightcyan", color = "white"))
return(p)
}
total.coverage <- coverage.map(coverage)
total.coverage
# Load NY State Maps ------------------------------------------------------
ny.map <- counties("New York", resolution = "5m") %>%
select("fips" = GEOID, geometry)
ny.fips <- ny.fips %>%
mutate(fips = as.character(fips))
ny.regions <- ny.map %>%
left_join(ny.fips, by = "fips") %>%
group_by(region) %>%
summarise(geometry = st_union(geometry), .groups = "drop")
# Compare Coverage --------------------------------------------------------
idexx.coverage <- idexx %>%
select(county, bacteria, Total) %>%
group_by(county, bacteria) %>%
summarize(Total = sum(Total, na.rm = T))
ahdc.coverage <- ahdc %>%
select(county, bacteria, Total) %>%
group_by(county, bacteria) %>%
summarize(Total = sum(Total, na.rm = T))
coverage <- idexx.coverage %>%
left_join(ahdc.coverage, by = c("county", "bacteria")) %>%
rename("idexx.total" = Total.x, "ahdc.total" = Total.y) %>%
group_by(county, bacteria) %>%
mutate(total = sum(idexx.total, ahdc.total, na.rm = T)) %>%
mutate(idexx.percent = (idexx.total/total)*100) %>%
ungroup() %>%
left_join(ny.fips, by = "county") %>%
left_join(ny.map, by = "fips")
##Plot Coverage Map
coverage.map <- function(map.data){
p <- ggplot(data = map.data) +
geom_sf(color = "grey30", linewidth = 0.3, aes(geometry = geometry, fill = idexx.percent))+
scale_fill_gradient2(low = "dodgerblue", mid = "lightyellow", high = "tomato", midpoint = 50,
name = "Testing Coverage",
breaks = c(5, 50, 95),
labels = c("100% AHDC", "Equal Coverage", "100% IDEXX"),
limit = c(0, 100),
na.value = "grey")+
geom_point(aes(x = -76.5019, y = 42.4440), color = "black", size = 1)+
theme_minimal()+
theme(legend.title=element_blank(),
legend.position="bottom",
legend.justification = "center",
legend.key.height = unit(0.5, "cm"),
legend.key.width = unit(3, "cm"),
legend.text = element_text(size = 12),
title = element_text(size = 14),
plot.title.position = "panel",
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "white", color = "white"))
return(p)
}
total.coverage <- coverage.map(coverage)
total.coverage
ec.coverage <- coverage.map(coverage %>% filter(bacteria == "Escherichia coli"))
sp.coverage <- coverage.map(coverage %>% filter(bacteria == "Staphylococcus pseudintermedius"))
coverage.maps <- ggarrange(total.coverage,
ggarrange(ec.coverage, sp.coverage, ncol = 2, labels = c("E. Coli", "S. pseudintermedius"), legend = F),
ncol = 1, nrow = 2, labels = "Total", common.legend = T, legend = "bottom")
coverage.maps
coverage.maps <- ggarrange(total.coverage, ec.coverage, sp.coverage,
ncol = 2, nrow = 2, labels = c("Total", "E. Coli", "S. pseudintermedius"), common.legend = T, legend = "bottom")
coverage.maps
?us_map
?us_map()
# Load NY State Maps ------------------------------------------------------
ny.map <- counties("New York", resolution = "1m") %>%
select("fips" = GEOID, geometry)
# Load NY State Maps ------------------------------------------------------
ny.map <- counties("New York", resolution = "500k") %>%
select("fips" = GEOID, geometry)
plot(ny.map$geometry)
# Load NY State Maps ------------------------------------------------------
ny.map <- counties("New York", resolution = "5m") %>%
select("fips" = GEOID, geometry)
plot(ny.map$geometry)
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
data <- arrow::read_parquet(file.choose())
View(data)
View(data)
unique_ids <- unique(data$id)
# Generate a random 5-digit number for each unique ID
set.seed(123) # Set seed for reproducibility
new_ids <- sample(10000:99999, length(unique_ids), replace = FALSE)
# Create a named vector for mapping
id_mapping <- setNames(new_ids, unique_ids)
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)])
library(dplyr)
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)])
View(data)
View(df)
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)]) %>%
select(-site)
View(df)
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)]) %>%
select(-site, - age_year)
View(df)
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)]) %>%
select(-site, - age_year) %>%
mutate(species = case_when(
species == "CANINE" ~ Dog,
species == "FELINE" ~ Cat,
TRUE ~ default_value
)
)
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)]) %>%
select(-site, - age_year) %>%
mutate(species = case_when(
species == "CANINE" ~ "Dog",
species == "FELINE" ~ "Cat",
TRUE ~ default_value
)
)
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)]) %>%
select(-site, - age_year) %>%
mutate(species = case_when(
species == "CANINE" ~ "Dog",
species == "FELINE" ~ "Cat",
TRUE ~ species
)
)
View(df)
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)]) %>%
select(-site, - age_year) %>%
mutate(species = case_when(
species == "CANINE" ~ "Dog",
species == "FELINE" ~ "Cat",
TRUE ~ species
),
bacteria = AMR::mo_name(bacteria)
)
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)]) %>%
select(-site, - age_year) %>%
mutate(species = case_when(
species == "CANINE" ~ "Dog",
species == "FELINE" ~ "Cat",
TRUE ~ species
),
bacteria = AMR::mo_name(bacteria),
drug = AMR::ab_name(drug)
)
View(df)
View(df)
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)]) %>%
select(-site, - age_year) %>%
mutate(species = case_when(
species == "CANINE" ~ "Dog",
species == "FELINE" ~ "Cat",
TRUE ~ species
),
bacteria = AMR::mo_name(bacteria),
drug = AMR::ab_name(drug)
),
# Apply the mapping to the 'id' column
df <- data %>%
mutate(id = id_mapping[as.character(id)]) %>%
select(-site, - age_year) %>%
mutate(species = case_when(
species == "CANINE" ~ "Dog",
species == "FELINE" ~ "Cat",
TRUE ~ species
),
bacteria = AMR::mo_name(bacteria),
drug = AMR::ab_name(drug)
) %>%
filter(value %in% c("S", "R", "I"))
View(df)
df <- df %>%
sample_n(size = 500000, replace = F)
View(df)
arrow::write_parquet(df, "NYSampleAMR.parquet")
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
?cor
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
shiny::runApp()
shiny::runApp()
shiny::runApp()
spacyr::spacy_install()
runApp()
runApp()
