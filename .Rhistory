}
interpret_mic_values <- function(data, breakpoint_file) {
# Read and process breakpoints
bp <- read.csv(breakpoint_file, encoding = "UTF-8")
names(bp) <- c("AM.name", "Antimicrobial", "S", "I", "R", "Resource",
"Host.species", "Bact.species", "Body.Site", "Comments")
# Handle Oxacillin special cases
data <- data %>%
mutate(
Antimicrobial = case_when(
Antimicrobial == "OXACIL" & Org_Group == "S.AUR" ~ "OXACIL.AUR",
Antimicrobial == "OXACIL" & Org_Group == "S.PSE" ~ "OXACIL.PSEUD",
TRUE ~ Antimicrobial
)
)
# Check for missing breakpoints and issue warnings
missing_bps <- setdiff(unique(data$Antimicrobial), bp$Antimicrobial)
if(length(missing_bps) > 0) {
for(drug in missing_bps) {
warning("missing breakpoint for ", drug, "\n")
}
}
# Interpret susceptibility and check dilution ranges
interpreted_data <- data %>%
left_join(bp %>% select(Antimicrobial, S), by = "Antimicrobial") %>%
group_by(Antimicrobial) %>%
mutate(
# Check dilution range problems
min_problem = sum(MIC_SIGN == "<=" & MIC_VAL > S, na.rm = TRUE),
max_problem = sum(MIC_SIGN == ">" & MIC_VAL < S, na.rm = TRUE)
) %>%
ungroup()
# Issue warnings for dilution range problems
drugs_with_problems <- interpreted_data %>%
select(Antimicrobial, min_problem, max_problem) %>%
distinct() %>%
filter(min_problem > 0 | max_problem > 0)
if(nrow(drugs_with_problems) > 0) {
for(i in 1:nrow(drugs_with_problems)) {
drug <- drugs_with_problems$Antimicrobial[i]
if(drugs_with_problems$min_problem[i] > 0) {
warning("minimum dilution greater than breakpoint for ", drug,
". N affected = ", drugs_with_problems$min_problem[i], "\n")
}
if(drugs_with_problems$max_problem[i] > 0) {
warning("maximum dilution less than breakpoint for ", drug,
". N affected = ", drugs_with_problems$max_problem[i], "\n")
}
}
}
# Add susceptibility interpretation
interpreted_data <- interpreted_data %>%
mutate(
Susceptible = case_when(
is.na(S) ~ NA,
(MIC_SIGN %in% c("<=", "=") & MIC_VAL <= S) ~ TRUE,
(MIC_SIGN %in% c(">", "=") & MIC_VAL > S) ~ FALSE,
TRUE ~ NA
)
) %>%
select(-min_problem, -max_problem)  # Remove the checking columns
# Merge OXACIL versions back together
interpreted_data <- interpreted_data %>%
mutate(
Antimicrobial = case_when(
Antimicrobial %in% c("OXACIL.AUR", "OXACIL.PSEUD") ~ "OXACIL",
TRUE ~ Antimicrobial
)
)
return(interpreted_data)
}
# Generate data
mic_data <- create_random_mic_data(n_isolates = 1000, seed = 123)
View(mic_data)
library(arrow)
data <- read_parquet(file.choose())
data <- read_parquet("/Users/kurtissobkowich/Library/CloudStorage/OneDrive-UniversityofGuelph/AMR/CIS4020/IDEXX_AMR_2019_2022_Synthetic_DG.parquet")
View(data)
data <- read_parquet("/Users/kurtissobkowich/Library/CloudStorage/OneDrive-UniversityofGuelph/AMR/CIS4020/230815-ASTDataSynthetic.parquet")
/Users/kurtissobkowich/Library/CloudStorage/OneDrive-UniversityofGuelph/AMR/CIS4020/230815-ASTDataSynthetic.parquet
data <- read_parquet("/Users/kurtissobkowich/Library/CloudStorage/OneDrive-UniversityofGuelph/AMR/CIS4020/230815-ASTDataSynthetic.parquet")
View(data)
data <- read_parquet("/Users/kurtissobkowich/Desktop/AMRDashboardDemos/sampleClean.parquet")
View(data)
library(foreach)
library(doParallel)
library(dplyr)
library(stringr)
library(AMR)
dataCleaner <- function(rawData, additionalCols = NULL) {
# Precompute the mappings for antimicrobial and microorganism names and classes
ab_name_data <- unique(rawData$Antimicrobial) %>%
data.frame(Antimicrobial = ., ab_name = ab_name(.))  # Create a mapping for ab_name
mo_name_data <- unique(rawData$Microorganism) %>%
data.frame(Microorganism = ., mo_name = mo_name(.))  # Create a mapping for mo_name
ab_class_data <- unique(rawData$Antimicrobial) %>%
data.frame(Antimicrobial = ., ab_class = ab_group(.))  # Create a mapping for ab_group
# Join these precomputed mappings to the rawData
rawData <- rawData %>%
left_join(ab_name_data, by = "Antimicrobial") %>%
left_join(mo_name_data, by = "Microorganism") %>%
left_join(ab_class_data, by = "Antimicrobial")
# Optional additional columns
if (!is.null(additionalCols)) {
additionalCols <- as.character(additionalCols)
additionalCols <- additionalCols[additionalCols %in% names(rawData)]
}
interpretation_map <- list(
"S" = c("S", "SUS", "SUSC", "SUSCEPTIBLE", "SDD", "SD"),
"I" = c("I", "INT", "INTERMEDIATE"),
"R" = c("R", "RES", "RESISTANT")
)
normalize_interpretation <- function(value) {
value <- toupper(str_trim(as.character(value)))  # Convert to uppercase & remove spaces
for (key in names(interpretation_map)) {
if (value %in% interpretation_map[[key]]) {
return(key)
}
}
for (key in names(interpretation_map)) {
if (any(agrepl(value, interpretation_map[[key]], ignore.case = TRUE, max.distance = 0.2))) {
return(key)
}
}
return(NA)
}
numCores <- detectCores() - 1
cl <- makeCluster(numCores)
registerDoParallel(cl)
# Parallel processing with foreach
cleanData <- foreach(chunk = split(rawData, cut(seq(nrow(rawData)), numCores, labels = FALSE)),
.combine = bind_rows, .packages = c("dplyr", "stringr", "AMR")) %dopar% {
additionalColsData <- if (!is.null(additionalCols)) {
chunk %>% select(all_of(additionalCols))
} else {
NULL
}
# Replace microorganism and antimicrobial columns with precomputed values
cleanedChunk <- chunk %>%
mutate(
ID = as.character(ID),
Year = if ("Year" %in% names(.)) as.integer(Year) else NA_integer_,
Month = if ("Month" %in% names(.)) {
ifelse(is.na(Month), 1, as.integer(Month))
} else {
1
},
Date = if("Date" %in% names(.)) {
as.Date(Date, format = "%Y-%m-%d")
} else {
as.Date(paste(Year, Month, "01", sep = "-"), format = "%Y-%m-%d")
},
Region = str_to_title(Region),
Subregion = str_to_sentence(Subregion),
Species = str_to_sentence(Species),
Source = str_to_sentence(Source),
# Replace antimicrobial and microorganism with precomputed names
Microorganism = mo_name,  # Use the precomputed mo_name
Antimicrobial = ab_name,  # Use the precomputed ab_name
Class = ab_class,         # Use the precomputed ab_class
Interpretation = sapply(Interpretation, normalize_interpretation)
) %>%
select(
ID, Date, Region, Subregion, Species, Source,
Microorganism, Antimicrobial, Class, Interpretation
)
# Bind additional columns if any
if (!is.null(additionalColsData)) {
cleanedChunk <- bind_cols(cleanedChunk, additionalColsData)
}
# Filter based on Interpretation
cleanedChunk <- cleanedChunk %>%
filter(Interpretation %in% c("S", "R", "I", 0, 1)) %>%
mutate(Interpretation = ifelse(Interpretation == 0, "S",
ifelse(Interpretation == 1, "R", Interpretation)))
return(cleanedChunk)
}
stopCluster(cl)
return(cleanData)
}
clean(dataCleaner(data))
clean <- dataCleaner(data)
data <- read_parquet("/Users/kurtissobkowich/Desktop/AMRDashboardDemos/sampleNcScVg.parquet")
View(data)
data <- data %>%
select("ID" = randomized_patient_id, "Year" = order_year, "Month" = order_month, "Region" = state, "Subregion" = county, "Species" = species, "Source" = source, "Microorganism" = org_standard, "Antimicrobial" = drug, "Interpretation" = value)
View(data)
source_key <- read.csv("/Users/kurtissobkowich/Library/CloudStorage/OneDrive-UniversityofGuelph/AMR/Data Keys/source_key.csv")
View(data)
View(source_key)
data <- data %>%
left_join(source_key, by = c("Source" = "source"))
data <- data %>%
select(ID, Year, Month, Region, Subregion, Species, "Source" = source_cat1, Microorganism, Antimicrobial, Interpretation)
data <- head(data, 2000000)
View(data)
unique_ids <- unique(data$ID)
set.seed(123)  # for reproducibility
shuffled_ids <- sample(unique_ids)
id_map <- data.frame(
old_id = unique_ids,
new_id = shuffled_ids
)
?seq
shuffled_ids <- seq(1, length(unique_ids), by = 1)
shuffled_ids <- sprintf("%06d", (seq(1, length(unique_ids), by = 1)))
shuffled_ids <- sprintf("%06d", (seq(1, length(unique_ids), by = 1)))
shuffled_ids
shuffled_ids <- sprintf("%05d", (seq(1, length(unique_ids), by = 1)))
id_map <- data.frame(
old_id = unique_ids,
new_id = shuffled_ids
)
View(id_map)
df_randomized <- data %>%
left_join(id_map, by = c("id" = "old_id")) %>%
select(-ID)
df_randomized <- data %>%
left_join(id_map, by = c("ID" = "old_id")) %>%
select(-ID)
View(df_randomized)
df_randomized <- data %>%
left_join(id_map, by = c("ID" = "old_id")) %>%
select("ID" = new_id, Year, Month, Region, Subregion, Species, Source, Microorganism, Antimicrobial, Interpretation)
View(df_randomized)
View(df_randomized)
df_randomized <- data %>%
left_join(id_map, by = c("ID" = "old_id")) %>%
mutate(Interpretation = sample(Interpretation)) %>%
select("ID" = new_id, Year, Month, Region, Subregion, Species, Source, Microorganism, Antimicrobial, Interpretation)
View(df_randomized)
df_randomized <- data %>%
left_join(id_map, by = c("ID" = "old_id")) %>%
mutate(Interpretation = sample(Interpretation),
Species = tolower(Species)) %>%
select("ID" = new_id, Year, Month, Region, Subregion, Species, Source, Microorganism, Antimicrobial, Interpretation)
View(df_randomized)
library(stringr)
library(stringr)
df_randomized <- data %>%
left_join(id_map, by = c("ID" = "old_id")) %>%
mutate(Interpretation = sample(Interpretation),
Species = str_to_sentence(Species)) %>%
select("ID" = new_id, Year, Month, Region, Subregion, Species, Source, Microorganism, Antimicrobial, Interpretation)
View(df_randomized)
write_parquet(df_randomized, "SyntheticDataForAMRVisualizer.parquet")
clean <- dataCleaner(df_randomized)
library(microbenchmark)
microbenchmark(cleaner = dataCleaner(df_randomized))
library(dplyr)
library(ggplot2)
library(plotly)
library(scales)
library(stringr)
library(treemapify)
summary.df <- read.csv("/Users/kurtissobkowich/Git/GBADs ARIF DPM Dashboard/Sample DPM Outputs/cattle_trial_CLM_current_summary.csv")
full.df <- read.csv("/Users/kurtissobkowich/Git/GBADs ARIF DPM Dashboard/Sample DPM Outputs/cattle_trial_CLM_current_cumulative total.csv")
t
## Production Outputs ------------------------------------------------------
### Values ---------------------------------------------------------------------
plot.df <- summary.df %>%
filter(X %in% c("Value_manure", "Value_hides", "Value_milk", "Value_offtake")) %>%
select(X, Mean) %>%
mutate(X = recode(X,
"Value_manure" = "Manure",
"Value_hides" = "Hides",
"Value_milk" = "Milk",
"Value_offtake" = "Meat"
))
ggplot(data = plot.df, aes(x = X, y = Mean)) +
geom_bar(stat = "identity", fill = "#F17105") +
scale_y_continuous(labels = format_y_labels(plot.df$Mean)) +
scale_x_discrete(labels = format_x_labels(plot.df$X)) +
labs(title = NULL)+
xlab("Output")+
ylab("Value (USD)")+
theme
# Consistent Plot Theme ---------------------------------------------------
theme <- theme_minimal() +
theme(
text = element_text(family = "Arial", size = 12),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank(),
strip.text = element_text(size = 12)
)
# Colour Palette ----------------------------------------------------------
colours <- c("#F17105", "#1A8FE3", "#E6C229","#D11149", "#6610F2")
# Format Y-Labs into Short Forms ------------------------------------------
format_y_labels <- function(x) {
if (max(x, na.rm = TRUE) >= 1e9) {
return(label_number(scale = 1e-9, suffix = " bln"))
} else if (max(x, na.rm = TRUE) >= 1e6) {
return(label_number(scale = 1e-6, suffix = " mil"))
} else if (max(x, na.rm = TRUE) >= 1e3) {
return(label_number(scale = 1e-3, suffix = "k"))
} else {
return(label_number())
}
}
# Format X-Labs into Full Names -------------------------------------------
category.map <- c(
"JF" = "Juvenile Females",
"JM" = "Juvenile Males",
"SubAF" = "Sub-Adult Females",
"SubAM" = "Sub-Adult Males",
"AF" = "Adult Females",
"AM" = "Adult Males",
"Ox" = "Oxen"
)
format_x_labels <- function(x) {
sapply(x, function(val) {
matched_keys <- names(category.map)[sapply(names(category.map), function(k) grepl(k, val))]
if (length(matched_keys) > 0) {
best_match <- matched_keys[which.max(nchar(matched_keys))]
category.map[[best_match]]
} else {
val
}
})
}
## Production Outputs ------------------------------------------------------
### Values ---------------------------------------------------------------------
plot.df <- summary.df %>%
filter(X %in% c("Value_manure", "Value_hides", "Value_milk", "Value_offtake")) %>%
select(X, Mean) %>%
mutate(X = recode(X,
"Value_manure" = "Manure",
"Value_hides" = "Hides",
"Value_milk" = "Milk",
"Value_offtake" = "Meat"
))
ggplot(data = plot.df, aes(x = X, y = Mean)) +
geom_bar(stat = "identity", fill = "#F17105") +
scale_y_continuous(labels = format_y_labels(plot.df$Mean)) +
scale_x_discrete(labels = format_x_labels(plot.df$X)) +
labs(title = NULL)+
xlab("Output")+
ylab("Value (USD)")+
theme
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
install.packages("webshot2")
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
install.packages("quarto")
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
detach("package:fs", unload = TRUE)
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
?quarto_render
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
quarto::quarto_path()
install.packages("quarto")
quarto::quarto_install()
install.packages("quarto")
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
library(tinytex)
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
detach("package:tinytex", unload = TRUE)
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
library(webshot2)
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
unlink(c("filters.RDS",
"splitGram_flag.txt",
"antibiogram_table.html",
"antibiogram_table2.html",
"antibiogram_table.png",
"antibiogram_table2.png",
"Antibiogram.qmd"), recursive = TRUE)
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
print(getwd())
print(list.files())
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
library(arrow)
data <- read_parquet(file.choose(0))
data <- head(data, 1000)
write.csv(data, "Temp.csv")
shiny::runApp('Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer')
getwd
getwd()
setwd("/Users/kurtissobkowich/Git/companion_animal_amr/AMRVisualizerV2/AMRDataVisualizer")
renv::status()
